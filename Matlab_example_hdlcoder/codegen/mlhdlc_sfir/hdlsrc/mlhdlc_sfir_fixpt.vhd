-- -------------------------------------------------------------
-- 
-- File Name: C:\projects\Matlab\codegen\mlhdlc_sfir\hdlsrc\mlhdlc_sfir_fixpt.vhd
-- Created: 2023-02-27 11:06:16
-- 
-- Generated by MATLAB 9.13, MATLAB Coder 5.5 and HDL Coder 4.0
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- y_out                         ce_out        1
-- delayed_xout                  ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mlhdlc_sfir_fixpt
-- Source Path: mlhdlc_sfir_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY mlhdlc_sfir_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        x_in                              :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        h_in1                             :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En15
        h_in2                             :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En16
        h_in3                             :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En16
        h_in4                             :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En15
        ce_out                            :   OUT   std_logic;
        y_out                             :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        delayed_xout                      :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En12
        );
END mlhdlc_sfir_fixpt;


ARCHITECTURE rtl OF mlhdlc_sfir_fixpt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL h_in1_signed                     : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL x_in_signed                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL ud1                              : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL ud2                              : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL ud3                              : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL ud4                              : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL ud5                              : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL ud6                              : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL ud7                              : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL ud8                              : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL h_in2_signed                     : signed(13 DOWNTO 0);  -- sfix14_En16
  SIGNAL h_in3_unsigned                   : unsigned(13 DOWNTO 0);  -- ufix14_En16
  SIGNAL h_in4_unsigned                   : unsigned(13 DOWNTO 0);  -- ufix14_En15
  SIGNAL a1                               : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL m1                               : signed(13 DOWNTO 0);  -- sfix14_En14
  SIGNAL p20m1_mul_temp                   : signed(27 DOWNTO 0);  -- sfix28_En27
  SIGNAL a2                               : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL m2                               : signed(13 DOWNTO 0);  -- sfix14_En15
  SIGNAL p21m2_mul_temp                   : signed(27 DOWNTO 0);  -- sfix28_En28
  SIGNAL a5                               : signed(13 DOWNTO 0);  -- sfix14_En14
  SIGNAL p24a5_add_cast                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL p24a5_add_cast_1                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL p24a5_add_temp                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL a3                               : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL m3                               : signed(13 DOWNTO 0);  -- sfix14_En14
  SIGNAL p22m3_cast                       : signed(14 DOWNTO 0);  -- sfix15_En16
  SIGNAL p22m3_mul_temp                   : signed(28 DOWNTO 0);  -- sfix29_En28
  SIGNAL p22m3_cast_1                     : signed(27 DOWNTO 0);  -- sfix28_En28
  SIGNAL a4                               : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL p19a4_add_cast                   : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL p19a4_add_cast_1                 : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL p19a4_add_temp                   : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL m4                               : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL p23m4_cast                       : signed(14 DOWNTO 0);  -- sfix15_En15
  SIGNAL p23m4_mul_temp                   : signed(28 DOWNTO 0);  -- sfix29_En26
  SIGNAL p23m4_cast_1                     : signed(27 DOWNTO 0);  -- sfix28_En26
  SIGNAL a6                               : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL p25a6_add_cast                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p25a6_add_cast_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p25a6_add_temp                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y_out_tmp                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL p26y_out_add_cast                : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p26y_out_add_cast_1              : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p26y_out_add_temp                : signed(16 DOWNTO 0);  -- sfix17_En14

BEGIN
  h_in1_signed <= signed(h_in1);

  x_in_signed <= signed(x_in);

  enb <= clk_enable;

  -- HDL code generation from MATLAB function: mlhdlc_sfir_fixpt
  -- access the previous value of states/registers
  -- declare and initialize the delay registers
  -- Symmetric FIR Filter
  --   Copyright 2011-2019 The MathWorks, Inc.
  -- (2) Filter coefficients passed in as parameters
  -- (1) Filter states represented using the persistent variables
  -- Key Design pattern covered in this example: 
  -- prior to performing the multiplication. 
  -- two data values that need to be multiplied with the same coefficient 
  -- multipliers can be approximately halved. The key is to add the 
  -- coefficient, h1 = coefficient hn-2, etc. In this case, the number of 
  -- Symmetry for an n-tap filter implies, coefficient h0 = coefficient hn-1, 
  -- We can reduce the complexity of the FIR filter by leveraging its symmetry. 
  -- Introduction:
  -- 
  -- MATLAB design: Symmetric FIR Filter
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --          Generated by MATLAB 9.13 and Fixed-Point Designer 7.5           %
  --                                                                          %
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  ud1_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud1 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud1 <= x_in_signed;
      END IF;
    END IF;
  END PROCESS ud1_reg_process;


  ud2_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud2 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud2 <= ud1;
      END IF;
    END IF;
  END PROCESS ud2_reg_process;


  ud3_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud3 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud3 <= ud2;
      END IF;
    END IF;
  END PROCESS ud3_reg_process;


  -- update the delay line
  ud4_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud4 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud4 <= ud3;
      END IF;
    END IF;
  END PROCESS ud4_reg_process;


  ud5_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud5 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud5 <= ud4;
      END IF;
    END IF;
  END PROCESS ud5_reg_process;


  ud6_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud6 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud6 <= ud5;
      END IF;
    END IF;
  END PROCESS ud6_reg_process;


  ud7_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud7 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud7 <= ud6;
      END IF;
    END IF;
  END PROCESS ud7_reg_process;


  -- delayout input signal
  ud8_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud8 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud8 <= ud7;
      END IF;
    END IF;
  END PROCESS ud8_reg_process;


  h_in2_signed <= signed(h_in2);

  h_in3_unsigned <= unsigned(h_in3);

  h_in4_unsigned <= unsigned(h_in4);

  a1 <= ud1 + ud8;

  -- multiplier chain
  p20m1_mul_temp <= h_in1_signed * a1;
  m1 <= p20m1_mul_temp(26 DOWNTO 13);

  a2 <= ud2 + ud7;

  p21m2_mul_temp <= h_in2_signed * a2;
  m2 <= p21m2_mul_temp(26 DOWNTO 13);

  -- adder chain
  p24a5_add_cast <= resize(m1 & '0', 16);
  p24a5_add_cast_1 <= resize(m2, 16);
  p24a5_add_temp <= p24a5_add_cast + p24a5_add_cast_1;
  a5 <= p24a5_add_temp(14 DOWNTO 1);

  a3 <= ud3 + ud6;

  p22m3_cast <= signed(resize(h_in3_unsigned, 15));
  p22m3_mul_temp <= p22m3_cast * a3;
  p22m3_cast_1 <= p22m3_mul_temp(27 DOWNTO 0);
  m3 <= p22m3_cast_1(27 DOWNTO 14);

  p19a4_add_cast <= resize(ud4, 15);
  p19a4_add_cast_1 <= resize(ud5, 15);
  p19a4_add_temp <= p19a4_add_cast + p19a4_add_cast_1;
  a4 <= p19a4_add_temp(14 DOWNTO 1);

  p23m4_cast <= signed(resize(h_in4_unsigned, 15));
  p23m4_mul_temp <= p23m4_cast * a4;
  p23m4_cast_1 <= p23m4_mul_temp(27 DOWNTO 0);
  m4 <= p23m4_cast_1(26 DOWNTO 13);

  p25a6_add_cast <= resize(m3, 16);
  p25a6_add_cast_1 <= resize(m4 & '0', 16);
  p25a6_add_temp <= p25a6_add_cast + p25a6_add_cast_1;
  a6 <= p25a6_add_temp(15 DOWNTO 2);

  -- filtered output
  p26y_out_add_cast <= resize(a5, 17);
  p26y_out_add_cast_1 <= resize(a6 & '0' & '0', 17);
  p26y_out_add_temp <= p26y_out_add_cast + p26y_out_add_cast_1;
  y_out_tmp <= p26y_out_add_temp(15 DOWNTO 2);

  y_out <= std_logic_vector(y_out_tmp);

  delayed_xout <= std_logic_vector(ud8);

  ce_out <= clk_enable;

END rtl;

