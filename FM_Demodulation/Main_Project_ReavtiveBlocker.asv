function y = doFilter(x)
%DOFILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.10 and DSP System Toolbox 9.12.
% Generated on: 14-Jun-2022 14:12:53

persistent Hd;
persistent Hd1;
persistent Hd2;

% FIR SLOPE
if isempty(Hd)
   
    N     = 20;       % Order
    Fstop = 1000;     % Stopband Frequency
    Fpass = 200000;   % Passband Frequency
    Astop = 10;       % Stopband Attenuation (dB)
    Fs    = 1000000;  % Sampling Frequency
    
    h = fdesign.highpass('n,fst,fp,ast', N, Fstop, Fpass, Astop, Fs);
    
    Hd = design(h, 'equiripple');
    
    set(Hd, 'Arithmetic', 'fixed', ...
        'InputWordLength', 14, ...
        'InputFracLength', 0, ...
        'CoeffWordLength', 16, ...
        'CoeffAutoScale', true, ...
        'FilterInternals', 'Fullprecision');
    
    set(Hd,'PersistentMemory',true);
    
end

% FIR but in FPGA will be differnet 
if isempty(Hd1)
    
    Fpass = 10000;     % Passband Frequency
    Fstop = 20000;    % Stopband Frequency
    Apass = 1;        % Passband Ripple (dB)
    Astop = 60;       % Stopband Attenuation (dB)
    Fs    = 1000000;  % Sampling Frequency
    
    h = fdesign.lowpass('fp,fst,ap,ast', Fpass, Fstop, Apass, Astop, Fs);
    
    Hd1 = design(h, 'equiripple', ...
        'MinOrder', 'any', ...
        'StopbandShape', 'flat');
    
    set(Hd1, 'Arithmetic', 'fixed', ...
        'InputWordLength', 14, ...
        'InputFracLength', 0, ...
        'CoeffWordLength', 16, ...
        'CoeffAutoScale', true, ...
        'FilterInternals', 'Fullprecision');
    
    set(Hd1,'PersistentMemory',true);
    
end

% lowpass for lose the multiplay 
if isempty(Hd2) 
    
    Fpass = 125000;   % Passband Frequency
    Fstop = 200000;   % Stopband Frequency
    Apass = 1;        % Passband Ripple (dB)
    Astop = 60;       % Stopband Attenuation (dB)
    Fs    = 1000000;  % Sampling Frequency
    
    h = fdesign.lowpass('fp,fst,ap,ast', Fpass, Fstop, Apass, Astop, Fs);
    
    Hd2 = design(h, 'equiripple', ...
        'MinOrder', 'any', ...
        'StopbandShape', 'flat');
    
    set(Hd2, 'Arithmetic', 'fixed', ...
        'InputWordLength', 14, ...
        'InputFracLength', 0, ...
        'CoeffWordLength', 16, ...
        'CoeffAutoScale', true, ...
        'FilterInternals', 'Fullprecision');
    
    set(Hd2,'PersistentMemory',true);
    
end

tiledlayout(6,2)

fs = 1000000; % Sampling frequency (samples per second)
fc = 125000; % Middle Frequency of FM FLo   
dt = 1/fs; % seconds per sample 
Cycles_T = 60; % seconds 
A = 1;
fDev = 25000;
T = (1/fc)*Cycles_T;
tt = 0:dt:T+dt;

% NCO X RF --------------------------------------
NCO = A*sin(2*pi*(fc+fDev*200)*tt);% DEV*200 = Because need for slop FIR to be in middle
x = A*sin(2*pi*5000*tt);
d = fmmod(x,fc,fs,fDev)*8192;

MUL_NCO_RF = NCO.*d;

nexttile;
plot(tt,x*8192,'c',tt,d,'b--')
title('DATA INPUT');
xlabel('SAMPLES');
ylabel('Amplitude');

nexttile;
F_IN = fftshift(abs(fft(d))./length(d));   
plot(tt,log(F_IN)) ;
title('DATA INPUT FFT');
xlabel('Frequency');
ylabel('Amplitude');

nexttile;
plot(tt,MUL_NCO_RF*8192,'c');
title('NCO');
xlabel('SAMPLES');
ylabel('Amplitude');

nexttile;
F_IN = fftshift(abs(fft(MUL_NCO_RF))./length(MUL_NCO_RF));   
plot(tt,log(F_IN)) ;
title('NCO FFT');
xlabel('Frequency');
ylabel('Amplitude');

% start FM DIMODULATION -------------------------
% FILTER LOSE MULTEPLY
after_FIR_MUL = filter(Hd2,MUL_NCO_RF);

nexttile;
plot(tt,after_FIR_MUL) ;
title('DATA AFTER FIR MUL');
xlabel('SAMPLES')
ylabel('Amplitude')

nexttile;
F_out = cast(after_FIR_MUL,"double")
F_out1 = fftshift(abs(fft(F_out))./length(F_out));   
plot(tt,log(F_out1)) ;
title('FFT AFTER FIR MUL');
xlabel('Frequency');
ylabel('Amplitude');

% ------------------------------------------------
% FM FIR SLOPE
y_after = filter(Hd,after_FIR_MUL);
nexttile;
plot(tt,y_after) ;
title('DATA OUT FROM FILTER 1');
xlabel('SAMPLES')
ylabel('Amplitude')

nexttile;
F_out = cast(y_after,"double")
F_out1 = fftshift(abs(fft(F_out))./length(F_out));   
plot(tt,log(F_out1)) ;
title('DATA OUT FFT');
xlabel('Frequency');
ylabel('Amplitude');


%Fc_sin = sin(2*pi*fc*tt)*8192;
%sum_sin = y_after.*Fc_sin;
s = length(y_after);
H = zeros(s);

for c = 1:s
    if y_after(c,1) < 0
        H(c,1) = 0;
    else
        H(c,1) = y_after(1,c);
    end
end


nexttile;
plot(tt,H);
title('ONLY POSITIVE VALUE');
xlabel('SAMPLES')
ylabel('Amplitude')

nexttile;
F_out2 = fftshift(abs(fft(H))./length(H));   
plot(tt,log(F_out2)) ;
title('DATA OUT FFT 2');
xlabel('Frequency');
ylabel('Amplitude');

data = filter(Hd1,H);

nexttile;
plot(tt,data);
title('DATA OUT FROM FILTER 2');
xlabel('SAMPLES')
ylabel('Amplitude')

nexttile;
F_out3 = cast(data,"double")
F_out4 = fftshift(abs(fft(F_out3))./length(F_out3));   
plot(tt,log(F_out4)) ;
title('DATA OUT FFT 3');
xlabel('Frequency');
ylabel('Amplitude');





